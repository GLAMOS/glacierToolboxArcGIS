#-------------------------------------------------------------------------------
# Name:        xyznVAW2line.py
#
#              THIS IS A STAND-ALONE SCRIPT AND CAN BE RUN E.G. IN PYSCRIPTER DIRECTLY!
#              NEVERTHELESS, ESRI ARCGIS & LICENSE MUST BE AVAILABLE!
#              ArcGIS 10.1!
#
# Purpose:     Reads a coordinate list text file and writes the points to a
#              ESRI ArcGIS polyline feature class (this feature class receives
#              the same name as the input text file).
#              The text-file has the structure: "610656.00,105838.00,2400.00,21"
#              x, y, z, and 21/22/23 where 21 stands for line start, 22 for
#              vertices along the line, and 23 for an end-point of a line.
#              The point list (text file) was generated by VAW ETHZ.
#
#              NB: depending on the text file, some "lines" will receive coordinates = 1 (for x, y, and z).
#              These are digitized points where start=end. They should be
#              ignored. If not -> delete these "lines" after script running manually.
#
# Preconditions: The script is quite static:
#              -> specify the absolute path and name of the text file at the start of the try-block.
#
# Content:     Read text file (list of coordinates); writing ArcGIS geometries (polyline);
#              split filenames; define spatial reference; create feature class;
#              insert Cursor; try-except-error handling.
#
# Author:      Samuel Wiesmann
#
# Created:     22.03.2011
#              last updated 19.04.2013, V2.0
#              last successful run: 19.04.2013 (ArcGIS 10.1, SP1)
#              Adapted by Yvo Weidmann regarding the comma separeted values and header line. Some static preconditions eliminated.
#
# Copyright:   (c) Samuel Wiesmann 2011-2013
# Licence:     CC creative commons 3.0,
#              creativecommons.org/licenses/by-nc-sa/3.0/
#-------------------------------------------------------------------------------
#!/usr/bin/env python
import arcpy, os


def doConversion(fileToConvert):

    # class for error handling
    class InputIndexError(Exception) : pass
    testIndextemp = 0
    lineWith20 = 0
    f = 0

    try:
        # specify file name (including file extension), e.g. "ried_1930_hl.txt"
        # ******************************************************************************************
        # specify file name (including file extension)
        # fileToConvert = r"D:\lukas\Geodata\Glacier\024_moiry\rand_20100922.txt"
        # ******************************************************************************************

        # Getting the working directory based on the absolute file path. The shapefile will be written in the same directory as the input file.
        currentWorkingDirectory = os.path.split(fileToConvert)[0]

        # open the text file
        inTextFile = open(fileToConvert, "r")

        # create name for output shapefile
        processingName = (os.path.split(fileToConvert)[1]).split(".")[0] # splits the path and name of inputfile at "." and [0] takes first string (everything until first ".")
        # processingName = e.g. "ried_1930_hl" if inputfile was "ried_1930_hl.xyzn"

        # define name of outputfile (shapefile) -> keeps the name of input file for name of the shapefile
        outShapefileName = processingName + ".shp"

        # text file is stored in a list ("lines")
        # content text file: e.g. "610656.00  105838.00  2400.00  21"
        arcpy.AddMessage("Reading input text file...")
        lines = inTextFile.readlines()

        # Open an insert cursor for the new feature class
        arcpy.AddMessage("Prepare the shapefile for editing...")
        # define coordinate system (spatial reference), usually this is CH1903 LV03
        spatial_ref = arcpy.SpatialReference(r"C:\Program Files (x86)\ArcGIS\Desktop10.0\Coordinate Systems\Projected Coordinate Systems\National Grids\Europe\CH1903 LV03.prj") # Quick hack for ArcGIS 10.0
        # syntax: arcpy.CreateFeatureclass_management(out_path, out_name, geometry_type, template, has_m, has_z, spatial_reference)
        arcpy.AddMessage("Working directory: " + currentWorkingDirectory)
        arcpy.AddMessage("Shapefile :" + outShapefileName)
        arcpy.CreateFeatureclass_management(currentWorkingDirectory, outShapefileName, "POLYLINE", "", "ENABLED", "ENABLED", spatial_ref)

        # Open an insert cursor for the new feature class
        cur = arcpy.InsertCursor(os.path.join(currentWorkingDirectory, outShapefileName))

        # Create an array and point object needed to create features
        lineArray = arcpy.Array()
        pnt = arcpy.Point()

        # count-number, only used for error handling
        i = 0

        # iterate through the lines in the input text file
        for line in lines: # type line is str

            # Increasing the counter as very first operation. The line is already read.
            i += 1

            # Skip the first line with the header information.
            if i == 1:
                continue

            # print line just for feedback in PyScripter
            arcpy.AddMessage("line " + str(i) + ": " + line)
            # assign values from each textfile-line to x, y, and z coordinate; 21 = firstPoint, 22 = points along the line, 23 = lastPoint (preconditions from output from VAW)
            pnt.X, pnt.Y, pnt.Z, indextemp = line.split(",")
            if ( (float(indextemp) == 21) ^ (float(indextemp) == 22) ^ (float(indextemp) == 23) ) :
                # add single points to the array which represents one polyline
                lineArray.add(pnt)

            # short test just to be sure that no other indexes than 21, 22, or 23 (inputfile problems)
            if ( (float(indextemp) != 21) ^ (float(indextemp) != 22) ^ (float(indextemp) != 23) ) :
                testIndextemp = 1 # =1 if there was another code (usually "20")
                f += 1 # count how many times another code is in the input file
                if (f == 1) :
                    lineWith20 = i # remember line number where code was not 21/22/23 the first time (for feedback in the end only)
                # the InputIndexError below is not used in this version of the script
                #raise InputIndexError, ("FAILURE: the index number in the input file is not 21, 22, nor 23 (line: " + str(i) + "). Check the input file.")

            

            if int(indextemp) == 23:
                # create a new row (new polyline) in the feature class (next point in list will be first point of a new line)
                feat = cur.newRow()
                # Set the geometry of the new feature to the array of points
                feat.shape = lineArray
                # Insert the feature
                cur.insertRow(feat)
                # empty array to prepare for next line
                lineArray.removeAll()

        # close the text file
        inTextFile.close()
        # delete the cursor to unlock feature class
        del cur

        arcpy.AddMessage("Process finished successfully.")
        if (testIndextemp == 1) :
            arcpy.AddMessage("*** BE AWARE THAT " + str(f) + " VERTICES HAVE CODE UNEQUAL TO 21/22/23 (FIRST TIME IN LINE: " + str(lineWith20) + ")")
            arcpy.AddMessage("*** This shouln't be the case if you are processing polylines! -> Check input file for possible reasons.")

        return os.path.join(currentWorkingDirectory, outShapefileName)
            
    except Exception as e:
        # Returns error messages
        arcpy.AddMessage(e.message)
